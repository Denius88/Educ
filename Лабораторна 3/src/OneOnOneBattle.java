import java.util.Random;

/**
 * –ö–ª–∞—Å –±–æ—é –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω –º—ñ–∂ –¥–≤–æ–º–∞ –¥—Ä–æ—ó–¥–∞–º–∏.
 * –í–∫–ª—é—á–∞—î —Å–∏—Å—Ç–µ–º—É –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –±–∞—Ñ—ñ–≤, —â–æ –º–æ–∂—É—Ç—å –∑'—è–≤–∏—Ç–∏—Å—è –ø—ñ–¥ —á–∞—Å —Ä–∞—É–Ω–¥—ñ–≤.
 * 
 * @author –ü–µ–ª–µ—Ö –î–µ–Ω–∏—Å
 * @version 2.0
 */
public class OneOnOneBattle extends Battle {
    private Droid droid1;
    private Droid droid2;
    private int roundNumber;
    private Random random;
    private static final int BUFF_CHANCE = 20; // 20% —à–∞–Ω—Å –±–∞—Ñ—É –∫–æ–∂–µ–Ω —Ä–∞—É–Ω–¥

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—é 1 –Ω–∞ 1.
     * 
     * @param droid1 –ü–µ—Ä—à–∏–π –¥—Ä–æ—ó–¥
     * @param droid2 –î—Ä—É–≥–∏–π –¥—Ä–æ—ó–¥
     */
    public OneOnOneBattle(Droid droid1, Droid droid2) {
        super();
        this.droid1 = droid1;
        this.droid2 = droid2;
        this.roundNumber = 0;
        this.random = new Random();
    }

    /**
     * –í–∏–ø–∞–¥–∫–æ–≤–æ –Ω–∞–¥–∞—Ç–∏ –±–∞—Ñ –æ–¥–Ω–æ–º—É –∑ –¥—Ä–æ—ó–¥—ñ–≤.
     */
    private void tryApplyRandomBuff() {
        if (random.nextInt(100) < BUFF_CHANCE) {
            Droid target = random.nextBoolean() ? droid1 : droid2;
            BuffType[] types = BuffType.values();
            BuffType randomType = types[random.nextInt(types.length)];
            
            int duration = (randomType == BuffType.FULL_HEAL) ? 0 : (random.nextInt(2) + 1); // 1-2 —Ä–∞—É–Ω–¥–∏
            Buff buff = new Buff(randomType, duration);
            
            String message = target.addBuff(buff);
            log(message + Colors.RESET);
        }
    }

    @Override
    public void start() {
        clearLog();
        log(Colors.BOLD + Colors.CYAN + "\n‚öîÔ∏è  === –ë–Ü–ô 1 –ù–ê 1 === ‚öîÔ∏è" + Colors.RESET);
        log("\n" + droid1.toString());
        log("   " + droid1.getHealthBar());
        log("\n" + Colors.BOLD + Colors.YELLOW + "      ‚ö° –ü–†–û–¢–ò ‚ö°" + Colors.RESET);
        log("\n" + droid2.toString());
        log("   " + droid2.getHealthBar());
        log("\n" + Colors.CYAN + "===================" + Colors.RESET + "\n");

        while (droid1.isAlive() && droid2.isAlive()) {
            roundNumber++;
            log(Colors.BOLD + Colors.PURPLE + "\n‚û§ –†–∞—É–Ω–¥ " + roundNumber + Colors.RESET);
            log(Colors.PURPLE + "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" + Colors.RESET);
            
            // –°–ø—Ä–æ–±–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –±–∞—Ñ
            tryApplyRandomBuff();
            
            // Droid 1 attacks
            if (droid1.isAlive()) {
                String attackResult = droid1.attack(droid2);
                log(attackResult);
                log("   " + droid2.getName() + " " + droid2.getHealthBar() + " " + droid2.getHealth() + "/" + droid2.getMaxHealth());
            }
            
            // Check if droid2 is defeated
            if (!droid2.isAlive()) {
                log("\n" + Colors.RED + "‚ò†Ô∏è  " + droid2.getName() + " –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!" + Colors.RESET);
                log(Colors.BOLD + Colors.GREEN + "\nüèÜ –ü–ï–†–ï–ú–û–ñ–ï–¶–¨: " + droid1.getName() + "! üèÜ" + Colors.RESET);
                break;
            }
            
            // Droid 2 attacks
            if (droid2.isAlive()) {
                String attackResult = droid2.attack(droid1);
                log(attackResult);
                log("   " + droid1.getName() + " " + droid1.getHealthBar() + " " + droid1.getHealth() + "/" + droid1.getMaxHealth());
            }
            
            // Check if droid1 is defeated
            if (!droid1.isAlive()) {
                log("\n" + Colors.RED + "‚ò†Ô∏è  " + droid1.getName() + " –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!" + Colors.RESET);
                log(Colors.BOLD + Colors.GREEN + "\nüèÜ –ü–ï–†–ï–ú–û–ñ–ï–¶–¨: " + droid2.getName() + "! üèÜ" + Colors.RESET);
                break;
            }
            
            // –û–Ω–æ–≤–∏—Ç–∏ –±–∞—Ñ–∏
            droid1.updateBuffs();
            droid2.updateBuffs();
            
            log("");
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à–æ–≥–æ –¥—Ä–æ—ó–¥–∞.
     * 
     * @return –ü–µ—Ä—à–∏–π –¥—Ä–æ—ó–¥
     */
    public Droid getDroid1() {
        return droid1;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä—É–≥–æ–≥–æ –¥—Ä–æ—ó–¥–∞.
     * 
     * @return –î—Ä—É–≥–∏–π –¥—Ä–æ—ó–¥
     */
    public Droid getDroid2() {
        return droid2;
    }
}
