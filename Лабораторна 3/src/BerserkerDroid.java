public class BerserkerDroid extends Droid {
    private static final int BERSERKER_HEALTH = 140;
    private static final int BERSERKER_DAMAGE = 18;
    private double rageMultiplier = 1.0;

    public BerserkerDroid(String name) {
        super(name, BERSERKER_HEALTH, BERSERKER_DAMAGE);
    }

    @Override
    public String attack(Droid target) {
        // –õ—é—Ç—ñ—Å—Ç—å –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –∫–æ–ª–∏ –∑–¥–æ—Ä–æ–≤'—è –Ω–∏–∑—å–∫–µ
        double healthPercent = (double)health / maxHealth;
        if (healthPercent < 0.3) {
            rageMultiplier = 2.0; // –ü–æ–¥–≤—ñ–π–Ω–∞ —à–∫–æ–¥–∞ –ø—Ä–∏ <30% –∑–¥–æ—Ä–æ–≤'—è
        } else if (healthPercent < 0.5) {
            rageMultiplier = 1.5; // 1.5x —à–∫–æ–¥–∞ –ø—Ä–∏ <50% –∑–¥–æ—Ä–æ–≤'—è
        } else {
            rageMultiplier = 1.0;
        }

        int actualDamage = (int)(damage * rageMultiplier);
        target.takeDamage(actualDamage);

        if (rageMultiplier > 1.5) {
            return String.format("%s –≤ –®–ê–õ–ï–ù–Ü–ô –õ–Æ–¢–û–°–¢–Ü —Ä–æ–∑—Ä–∏–≤–∞—î %s –Ω–∞ %d —à–∫–æ–¥–∏! üí¢", 
                name, target.getName(), actualDamage);
        } else if (rageMultiplier > 1.0) {
            return String.format("%s –≤ –ª—é—Ç–æ—Å—Ç—ñ –±'—î %s –Ω–∞ %d —à–∫–æ–¥–∏! üò§", 
                name, target.getName(), actualDamage);
        } else {
            return String.format("%s –∞—Ç–∞–∫—É—î %s –Ω–∞ %d —à–∫–æ–¥–∏", 
                name, target.getName(), actualDamage);
        }
    }

    @Override
    public String getType() {
        return "–ë–µ—Ä—Å–µ—Ä–∫";
    }

    @Override
    public String getColor() {
        return Colors.RED;
    }
}
